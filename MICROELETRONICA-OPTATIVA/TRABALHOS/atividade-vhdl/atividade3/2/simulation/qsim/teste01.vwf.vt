// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2022 23:00:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    address_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module address_decoder_vlg_sample_tst(
	x,
	sampler_tx
);
input [5:0] x;
output sampler_tx;

reg sample;
time current_time;
always @(x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module address_decoder_vlg_check_tst (
	y,
	sampler_rx
);
input [63:0] y;
input sampler_rx;

reg [63:0] y_expected;

reg [63:0] y_prev;

reg [63:0] y_expected_prev;

reg [63:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	y_expected_prev = y_expected;
end


// expected y[ 63 ]
initial
begin
	y_expected[63] = 1'bX;
end 
// expected y[ 62 ]
initial
begin
	y_expected[62] = 1'bX;
end 
// expected y[ 61 ]
initial
begin
	y_expected[61] = 1'bX;
end 
// expected y[ 60 ]
initial
begin
	y_expected[60] = 1'bX;
end 
// expected y[ 59 ]
initial
begin
	y_expected[59] = 1'bX;
end 
// expected y[ 58 ]
initial
begin
	y_expected[58] = 1'bX;
end 
// expected y[ 57 ]
initial
begin
	y_expected[57] = 1'bX;
end 
// expected y[ 56 ]
initial
begin
	y_expected[56] = 1'bX;
end 
// expected y[ 55 ]
initial
begin
	y_expected[55] = 1'bX;
end 
// expected y[ 54 ]
initial
begin
	y_expected[54] = 1'bX;
end 
// expected y[ 53 ]
initial
begin
	y_expected[53] = 1'bX;
end 
// expected y[ 52 ]
initial
begin
	y_expected[52] = 1'bX;
end 
// expected y[ 51 ]
initial
begin
	y_expected[51] = 1'bX;
end 
// expected y[ 50 ]
initial
begin
	y_expected[50] = 1'bX;
end 
// expected y[ 49 ]
initial
begin
	y_expected[49] = 1'bX;
end 
// expected y[ 48 ]
initial
begin
	y_expected[48] = 1'bX;
end 
// expected y[ 47 ]
initial
begin
	y_expected[47] = 1'bX;
end 
// expected y[ 46 ]
initial
begin
	y_expected[46] = 1'bX;
end 
// expected y[ 45 ]
initial
begin
	y_expected[45] = 1'bX;
end 
// expected y[ 44 ]
initial
begin
	y_expected[44] = 1'bX;
end 
// expected y[ 43 ]
initial
begin
	y_expected[43] = 1'bX;
end 
// expected y[ 42 ]
initial
begin
	y_expected[42] = 1'bX;
end 
// expected y[ 41 ]
initial
begin
	y_expected[41] = 1'bX;
end 
// expected y[ 40 ]
initial
begin
	y_expected[40] = 1'bX;
end 
// expected y[ 39 ]
initial
begin
	y_expected[39] = 1'bX;
end 
// expected y[ 38 ]
initial
begin
	y_expected[38] = 1'bX;
end 
// expected y[ 37 ]
initial
begin
	y_expected[37] = 1'bX;
end 
// expected y[ 36 ]
initial
begin
	y_expected[36] = 1'bX;
end 
// expected y[ 35 ]
initial
begin
	y_expected[35] = 1'bX;
end 
// expected y[ 34 ]
initial
begin
	y_expected[34] = 1'bX;
end 
// expected y[ 33 ]
initial
begin
	y_expected[33] = 1'bX;
end 
// expected y[ 32 ]
initial
begin
	y_expected[32] = 1'bX;
end 
// expected y[ 31 ]
initial
begin
	y_expected[31] = 1'bX;
end 
// expected y[ 30 ]
initial
begin
	y_expected[30] = 1'bX;
end 
// expected y[ 29 ]
initial
begin
	y_expected[29] = 1'bX;
end 
// expected y[ 28 ]
initial
begin
	y_expected[28] = 1'bX;
end 
// expected y[ 27 ]
initial
begin
	y_expected[27] = 1'bX;
end 
// expected y[ 26 ]
initial
begin
	y_expected[26] = 1'bX;
end 
// expected y[ 25 ]
initial
begin
	y_expected[25] = 1'bX;
end 
// expected y[ 24 ]
initial
begin
	y_expected[24] = 1'bX;
end 
// expected y[ 23 ]
initial
begin
	y_expected[23] = 1'bX;
end 
// expected y[ 22 ]
initial
begin
	y_expected[22] = 1'bX;
end 
// expected y[ 21 ]
initial
begin
	y_expected[21] = 1'bX;
end 
// expected y[ 20 ]
initial
begin
	y_expected[20] = 1'bX;
end 
// expected y[ 19 ]
initial
begin
	y_expected[19] = 1'bX;
end 
// expected y[ 18 ]
initial
begin
	y_expected[18] = 1'bX;
end 
// expected y[ 17 ]
initial
begin
	y_expected[17] = 1'bX;
end 
// expected y[ 16 ]
initial
begin
	y_expected[16] = 1'bX;
end 
// expected y[ 15 ]
initial
begin
	y_expected[15] = 1'bX;
end 
// expected y[ 14 ]
initial
begin
	y_expected[14] = 1'bX;
end 
// expected y[ 13 ]
initial
begin
	y_expected[13] = 1'bX;
end 
// expected y[ 12 ]
initial
begin
	y_expected[12] = 1'bX;
end 
// expected y[ 11 ]
initial
begin
	y_expected[11] = 1'bX;
end 
// expected y[ 10 ]
initial
begin
	y_expected[10] = 1'bX;
end 
// expected y[ 9 ]
initial
begin
	y_expected[9] = 1'bX;
end 
// expected y[ 8 ]
initial
begin
	y_expected[8] = 1'bX;
end 
// expected y[ 7 ]
initial
begin
	y_expected[7] = 1'bX;
end 
// expected y[ 6 ]
initial
begin
	y_expected[6] = 1'bX;
end 
// expected y[ 5 ]
initial
begin
	y_expected[5] = 1'bX;
end 
// expected y[ 4 ]
initial
begin
	y_expected[4] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// generate trigger
always @(y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected y = %b | ",y_expected_prev);
	$display("| real y = %b | ",y_prev);
`endif
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( y_expected_prev[4] !== 1'bx ) && ( y_prev[4] !== y_expected_prev[4] )
		&& ((y_expected_prev[4] !== last_y_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[4] = y_expected_prev[4];
	end
	if (
		( y_expected_prev[5] !== 1'bx ) && ( y_prev[5] !== y_expected_prev[5] )
		&& ((y_expected_prev[5] !== last_y_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[5] = y_expected_prev[5];
	end
	if (
		( y_expected_prev[6] !== 1'bx ) && ( y_prev[6] !== y_expected_prev[6] )
		&& ((y_expected_prev[6] !== last_y_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[6] = y_expected_prev[6];
	end
	if (
		( y_expected_prev[7] !== 1'bx ) && ( y_prev[7] !== y_expected_prev[7] )
		&& ((y_expected_prev[7] !== last_y_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[7] = y_expected_prev[7];
	end
	if (
		( y_expected_prev[8] !== 1'bx ) && ( y_prev[8] !== y_expected_prev[8] )
		&& ((y_expected_prev[8] !== last_y_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[8] = y_expected_prev[8];
	end
	if (
		( y_expected_prev[9] !== 1'bx ) && ( y_prev[9] !== y_expected_prev[9] )
		&& ((y_expected_prev[9] !== last_y_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[9] = y_expected_prev[9];
	end
	if (
		( y_expected_prev[10] !== 1'bx ) && ( y_prev[10] !== y_expected_prev[10] )
		&& ((y_expected_prev[10] !== last_y_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[10] = y_expected_prev[10];
	end
	if (
		( y_expected_prev[11] !== 1'bx ) && ( y_prev[11] !== y_expected_prev[11] )
		&& ((y_expected_prev[11] !== last_y_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[11] = y_expected_prev[11];
	end
	if (
		( y_expected_prev[12] !== 1'bx ) && ( y_prev[12] !== y_expected_prev[12] )
		&& ((y_expected_prev[12] !== last_y_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[12] = y_expected_prev[12];
	end
	if (
		( y_expected_prev[13] !== 1'bx ) && ( y_prev[13] !== y_expected_prev[13] )
		&& ((y_expected_prev[13] !== last_y_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[13] = y_expected_prev[13];
	end
	if (
		( y_expected_prev[14] !== 1'bx ) && ( y_prev[14] !== y_expected_prev[14] )
		&& ((y_expected_prev[14] !== last_y_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[14] = y_expected_prev[14];
	end
	if (
		( y_expected_prev[15] !== 1'bx ) && ( y_prev[15] !== y_expected_prev[15] )
		&& ((y_expected_prev[15] !== last_y_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[15] = y_expected_prev[15];
	end
	if (
		( y_expected_prev[16] !== 1'bx ) && ( y_prev[16] !== y_expected_prev[16] )
		&& ((y_expected_prev[16] !== last_y_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[16] = y_expected_prev[16];
	end
	if (
		( y_expected_prev[17] !== 1'bx ) && ( y_prev[17] !== y_expected_prev[17] )
		&& ((y_expected_prev[17] !== last_y_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[17] = y_expected_prev[17];
	end
	if (
		( y_expected_prev[18] !== 1'bx ) && ( y_prev[18] !== y_expected_prev[18] )
		&& ((y_expected_prev[18] !== last_y_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[18] = y_expected_prev[18];
	end
	if (
		( y_expected_prev[19] !== 1'bx ) && ( y_prev[19] !== y_expected_prev[19] )
		&& ((y_expected_prev[19] !== last_y_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[19] = y_expected_prev[19];
	end
	if (
		( y_expected_prev[20] !== 1'bx ) && ( y_prev[20] !== y_expected_prev[20] )
		&& ((y_expected_prev[20] !== last_y_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[20] = y_expected_prev[20];
	end
	if (
		( y_expected_prev[21] !== 1'bx ) && ( y_prev[21] !== y_expected_prev[21] )
		&& ((y_expected_prev[21] !== last_y_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[21] = y_expected_prev[21];
	end
	if (
		( y_expected_prev[22] !== 1'bx ) && ( y_prev[22] !== y_expected_prev[22] )
		&& ((y_expected_prev[22] !== last_y_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[22] = y_expected_prev[22];
	end
	if (
		( y_expected_prev[23] !== 1'bx ) && ( y_prev[23] !== y_expected_prev[23] )
		&& ((y_expected_prev[23] !== last_y_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[23] = y_expected_prev[23];
	end
	if (
		( y_expected_prev[24] !== 1'bx ) && ( y_prev[24] !== y_expected_prev[24] )
		&& ((y_expected_prev[24] !== last_y_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[24] = y_expected_prev[24];
	end
	if (
		( y_expected_prev[25] !== 1'bx ) && ( y_prev[25] !== y_expected_prev[25] )
		&& ((y_expected_prev[25] !== last_y_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[25] = y_expected_prev[25];
	end
	if (
		( y_expected_prev[26] !== 1'bx ) && ( y_prev[26] !== y_expected_prev[26] )
		&& ((y_expected_prev[26] !== last_y_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[26] = y_expected_prev[26];
	end
	if (
		( y_expected_prev[27] !== 1'bx ) && ( y_prev[27] !== y_expected_prev[27] )
		&& ((y_expected_prev[27] !== last_y_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[27] = y_expected_prev[27];
	end
	if (
		( y_expected_prev[28] !== 1'bx ) && ( y_prev[28] !== y_expected_prev[28] )
		&& ((y_expected_prev[28] !== last_y_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[28] = y_expected_prev[28];
	end
	if (
		( y_expected_prev[29] !== 1'bx ) && ( y_prev[29] !== y_expected_prev[29] )
		&& ((y_expected_prev[29] !== last_y_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[29] = y_expected_prev[29];
	end
	if (
		( y_expected_prev[30] !== 1'bx ) && ( y_prev[30] !== y_expected_prev[30] )
		&& ((y_expected_prev[30] !== last_y_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[30] = y_expected_prev[30];
	end
	if (
		( y_expected_prev[31] !== 1'bx ) && ( y_prev[31] !== y_expected_prev[31] )
		&& ((y_expected_prev[31] !== last_y_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[31] = y_expected_prev[31];
	end
	if (
		( y_expected_prev[32] !== 1'bx ) && ( y_prev[32] !== y_expected_prev[32] )
		&& ((y_expected_prev[32] !== last_y_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[32] = y_expected_prev[32];
	end
	if (
		( y_expected_prev[33] !== 1'bx ) && ( y_prev[33] !== y_expected_prev[33] )
		&& ((y_expected_prev[33] !== last_y_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[33] = y_expected_prev[33];
	end
	if (
		( y_expected_prev[34] !== 1'bx ) && ( y_prev[34] !== y_expected_prev[34] )
		&& ((y_expected_prev[34] !== last_y_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[34] = y_expected_prev[34];
	end
	if (
		( y_expected_prev[35] !== 1'bx ) && ( y_prev[35] !== y_expected_prev[35] )
		&& ((y_expected_prev[35] !== last_y_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[35] = y_expected_prev[35];
	end
	if (
		( y_expected_prev[36] !== 1'bx ) && ( y_prev[36] !== y_expected_prev[36] )
		&& ((y_expected_prev[36] !== last_y_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[36] = y_expected_prev[36];
	end
	if (
		( y_expected_prev[37] !== 1'bx ) && ( y_prev[37] !== y_expected_prev[37] )
		&& ((y_expected_prev[37] !== last_y_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[37] = y_expected_prev[37];
	end
	if (
		( y_expected_prev[38] !== 1'bx ) && ( y_prev[38] !== y_expected_prev[38] )
		&& ((y_expected_prev[38] !== last_y_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[38] = y_expected_prev[38];
	end
	if (
		( y_expected_prev[39] !== 1'bx ) && ( y_prev[39] !== y_expected_prev[39] )
		&& ((y_expected_prev[39] !== last_y_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[39] = y_expected_prev[39];
	end
	if (
		( y_expected_prev[40] !== 1'bx ) && ( y_prev[40] !== y_expected_prev[40] )
		&& ((y_expected_prev[40] !== last_y_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[40] = y_expected_prev[40];
	end
	if (
		( y_expected_prev[41] !== 1'bx ) && ( y_prev[41] !== y_expected_prev[41] )
		&& ((y_expected_prev[41] !== last_y_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[41] = y_expected_prev[41];
	end
	if (
		( y_expected_prev[42] !== 1'bx ) && ( y_prev[42] !== y_expected_prev[42] )
		&& ((y_expected_prev[42] !== last_y_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[42] = y_expected_prev[42];
	end
	if (
		( y_expected_prev[43] !== 1'bx ) && ( y_prev[43] !== y_expected_prev[43] )
		&& ((y_expected_prev[43] !== last_y_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[43] = y_expected_prev[43];
	end
	if (
		( y_expected_prev[44] !== 1'bx ) && ( y_prev[44] !== y_expected_prev[44] )
		&& ((y_expected_prev[44] !== last_y_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[44] = y_expected_prev[44];
	end
	if (
		( y_expected_prev[45] !== 1'bx ) && ( y_prev[45] !== y_expected_prev[45] )
		&& ((y_expected_prev[45] !== last_y_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[45] = y_expected_prev[45];
	end
	if (
		( y_expected_prev[46] !== 1'bx ) && ( y_prev[46] !== y_expected_prev[46] )
		&& ((y_expected_prev[46] !== last_y_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[46] = y_expected_prev[46];
	end
	if (
		( y_expected_prev[47] !== 1'bx ) && ( y_prev[47] !== y_expected_prev[47] )
		&& ((y_expected_prev[47] !== last_y_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[47] = y_expected_prev[47];
	end
	if (
		( y_expected_prev[48] !== 1'bx ) && ( y_prev[48] !== y_expected_prev[48] )
		&& ((y_expected_prev[48] !== last_y_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[48] = y_expected_prev[48];
	end
	if (
		( y_expected_prev[49] !== 1'bx ) && ( y_prev[49] !== y_expected_prev[49] )
		&& ((y_expected_prev[49] !== last_y_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[49] = y_expected_prev[49];
	end
	if (
		( y_expected_prev[50] !== 1'bx ) && ( y_prev[50] !== y_expected_prev[50] )
		&& ((y_expected_prev[50] !== last_y_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[50] = y_expected_prev[50];
	end
	if (
		( y_expected_prev[51] !== 1'bx ) && ( y_prev[51] !== y_expected_prev[51] )
		&& ((y_expected_prev[51] !== last_y_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[51] = y_expected_prev[51];
	end
	if (
		( y_expected_prev[52] !== 1'bx ) && ( y_prev[52] !== y_expected_prev[52] )
		&& ((y_expected_prev[52] !== last_y_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[52] = y_expected_prev[52];
	end
	if (
		( y_expected_prev[53] !== 1'bx ) && ( y_prev[53] !== y_expected_prev[53] )
		&& ((y_expected_prev[53] !== last_y_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[53] = y_expected_prev[53];
	end
	if (
		( y_expected_prev[54] !== 1'bx ) && ( y_prev[54] !== y_expected_prev[54] )
		&& ((y_expected_prev[54] !== last_y_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[54] = y_expected_prev[54];
	end
	if (
		( y_expected_prev[55] !== 1'bx ) && ( y_prev[55] !== y_expected_prev[55] )
		&& ((y_expected_prev[55] !== last_y_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[55] = y_expected_prev[55];
	end
	if (
		( y_expected_prev[56] !== 1'bx ) && ( y_prev[56] !== y_expected_prev[56] )
		&& ((y_expected_prev[56] !== last_y_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[56] = y_expected_prev[56];
	end
	if (
		( y_expected_prev[57] !== 1'bx ) && ( y_prev[57] !== y_expected_prev[57] )
		&& ((y_expected_prev[57] !== last_y_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[57] = y_expected_prev[57];
	end
	if (
		( y_expected_prev[58] !== 1'bx ) && ( y_prev[58] !== y_expected_prev[58] )
		&& ((y_expected_prev[58] !== last_y_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[58] = y_expected_prev[58];
	end
	if (
		( y_expected_prev[59] !== 1'bx ) && ( y_prev[59] !== y_expected_prev[59] )
		&& ((y_expected_prev[59] !== last_y_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[59] = y_expected_prev[59];
	end
	if (
		( y_expected_prev[60] !== 1'bx ) && ( y_prev[60] !== y_expected_prev[60] )
		&& ((y_expected_prev[60] !== last_y_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[60] = y_expected_prev[60];
	end
	if (
		( y_expected_prev[61] !== 1'bx ) && ( y_prev[61] !== y_expected_prev[61] )
		&& ((y_expected_prev[61] !== last_y_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[61] = y_expected_prev[61];
	end
	if (
		( y_expected_prev[62] !== 1'bx ) && ( y_prev[62] !== y_expected_prev[62] )
		&& ((y_expected_prev[62] !== last_y_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[62] = y_expected_prev[62];
	end
	if (
		( y_expected_prev[63] !== 1'bx ) && ( y_prev[63] !== y_expected_prev[63] )
		&& ((y_expected_prev[63] !== last_y_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[63] = y_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module address_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] x;
// wires                                               
wire [63:0] y;

wire sampler;                             

// assign statements (if any)                          
address_decoder i1 (
// port map - connection between master ports and signals/registers   
	.x(x),
	.y(y)
);
// x[ 5 ]
initial
begin
	x[5] = 1'b0;
end 
// x[ 4 ]
initial
begin
	x[4] = 1'b0;
end 
// x[ 3 ]
initial
begin
	x[3] = 1'b0;
end 
// x[ 2 ]
initial
begin
	x[2] = 1'b0;
	x[2] = #400000 1'b1;
	x[2] = #400000 1'b0;
end 
// x[ 1 ]
initial
begin
	repeat(2)
	begin
		x[1] = 1'b0;
		x[1] = #200000 1'b1;
		# 200000;
	end
	x[1] = 1'b0;
end 
// x[ 0 ]
always
begin
	x[0] = 1'b0;
	x[0] = #100000 1'b1;
	#100000;
end 

address_decoder_vlg_sample_tst tb_sample (
	.x(x),
	.sampler_tx(sampler)
);

address_decoder_vlg_check_tst tb_out(
	.y(y),
	.sampler_rx(sampler)
);
endmodule

